//----------------------------------------------------------------------------------------------------
// File list01.cpp exercises the class List
//----------------------------------------------------------------------------------------------------
// Author: Mr. Connor Bowlan
// Student ID: *20319760
// Course: CMSC 2613 - Programming II
// CRN: 21256, Spring, 2015
// Project: p01
// Due: January 23, 2015
// Account: tt111
//----------------------------------------------------------------------------------------------------
// Copyright January, 2015 by Mr. Connor Bowlan
// Do not reproduce without permission from Mr. Connor Bowlan
//----------------------------------------------------------------------------------------------------
// C++ Standard Include Files
//----------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream> /* For ifstream and ofstream */
#include <string.h>
#include <stdlib.h>
#include <iomanip>
using namespace std;
//----------------------------------------------------------------------------------------------------
// Application Include Files
//----------------------------------------------------------------------------------------------------
#include "List01.h"
//----------------------------------------------------------------------------------------------------
// Member Functions
//----------------------------------------------------------------------------------------------------
// isFull
//----------------------------------------------------------------------------------------------------
bool List::isFull(void)
{
	return count >= size-1;
}
//----------------------------------------------------------------------------------------------------
// isEmpty
//----------------------------------------------------------------------------------------------------
bool List::isEmpty(void)
{
	return count == 0;
}
//----------------------------------------------------------------------------------------------------
// Insert New Number
//----------------------------------------------------------------------------------------------------
void List::Insert(int v)
{
	if(isFull())
	{
		throw ListException("full");
	}
	else
	{
		L[count++] = v;
	}
}
//----------------------------------------------------------------------------------------------------
// Scan and Read Input
//----------------------------------------------------------------------------------------------------
void List::Scan(istream& input)
{	
	for(;;)
	{
		int v;
		input >> v;
		if(input.eof()) {
			break;
		}
		else
		{
			Insert(v);
		}
	}
}
//----------------------------------------------------------------------------------------------------
// Print out whole list
//----------------------------------------------------------------------------------------------------
void List::Print(ostream& output)
{		
	for(int a=0; a < count; a++)
	{
			output << setw(5) << L[a];
	}
	cout << endl;
}
//----------------------------------------------------------------------------------------------------
// Print out number results
//----------------------------------------------------------------------------------------------------
void List::Print(ostream& output, double result)
{	
	output << result;
}
//----------------------------------------------------------------------------------------------------
// Print out int number results
//----------------------------------------------------------------------------------------------------
void List::Print(ostream& output, int result)
{	
	output << result;
}
//----------------------------------------------------------------------------------------------------
// Sort from least to greatest
//----------------------------------------------------------------------------------------------------
void List::Sort()
{	
	for(int i = 0; i < count; i++)
	{		
		for(int j = 0; j < count; j++) {
		
			if(L[i] < L[j])
			{								
				int temp = L[i];
				L[i] = L[j];
				L[j] = temp;
			}
		}
	}
}
//----------------------------------------------------------------------------------------------------
// Find the mean
//----------------------------------------------------------------------------------------------------
double List::findMean()
{
	int total = 0;

	for(int i = 0; i < count; i++)
	{
		total += L[i];
	}
	double mean = (double)total / (double)count;
	
	return mean;

}
//----------------------------------------------------------------------------------------------------
// Find the median
//----------------------------------------------------------------------------------------------------
double List::findMedian()
{
	int remainder = count % 2;
	
	// If amount of numbers is odd
	if(count > 0) {
		int middle = (count / 2) + .5;
		
		double median = L[middle];
		
		return median;
	}
	// If amount of numbers is even
	else
	{
		int middle1 = count / 2;
		int middle2 = (count / 2) - 1;
		
		double median1 = L[middle1];
		double median2 = L[middle2];
		
		double median = (median1 + median2) / 2;
		
		return median;
	}
}
//----------------------------------------------------------------------------------------------------
// Find the mode
//----------------------------------------------------------------------------------------------------
int List::findMode()
{	
	int tempFreq = 0;
	int totalFreq = 0;
		
	int mode = 0;
	int modeInc = 0;

	for(int i = 0; i < count; i++)
	{
		int currentNum = L[i];
		for(int j = 0; j < count; j++)
		{
			if(currentNum == L[j])
			{
				tempFreq++;
			}
		}
		if(tempFreq > totalFreq)
		{
			totalFreq = tempFreq;
			mode = currentNum;
		}
		tempFreq = 0;
	}
	
	return mode;
}